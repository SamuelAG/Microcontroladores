

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May 27 21:48:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.05
    20                           ; Generated 20/12/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  007B24                     __pidataCOMRAM:
    56                           	opt callstack 0
    57                           
    58                           ;initializer for _byte7seg
    59  007B24  00FC               	dw	252
    60  007B26  0060               	dw	96
    61  007B28  00DA               	dw	218
    62  007B2A  00F2               	dw	242
    63  007B2C  0066               	dw	102
    64  007B2E  00B6               	dw	182
    65  007B30  00BE               	dw	190
    66  007B32  00E0               	dw	224
    67  007B34  00FE               	dw	254
    68  007B36  00F6               	dw	246
    69  0000                     _TRISD	set	3989
    70  0000                     _ADCON1	set	4033
    71  0000                     _LATDbits	set	3980
    72  0000                     _PORTDbits	set	3971
    73                           
    74                           ; #config settings
    75  0000                     
    76                           	psect	cinit
    77  007B4E                     __pcinit:
    78                           	opt callstack 0
    79  007B4E                     start_initialization:
    80                           	opt callstack 0
    81  007B4E                     __initialization:
    82                           	opt callstack 0
    83                           
    84                           ; Initialize objects allocated to COMRAM (20 bytes)
    85                           ; load TBLPTR registers with __pidataCOMRAM
    86  007B4E  0E24               	movlw	low __pidataCOMRAM
    87  007B50  6EF6               	movwf	tblptrl,c
    88  007B52  0E7B               	movlw	high __pidataCOMRAM
    89  007B54  6EF7               	movwf	tblptrh,c
    90  007B56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    91  007B58  6EF8               	movwf	tblptru,c
    92  007B5A  EE00  F029         	lfsr	0,__pdataCOMRAM
    93  007B5E  EE10 F014          	lfsr	1,20
    94  007B62                     copy_data0:
    95  007B62  0009               	tblrd		*+
    96  007B64  CFF5 FFEE          	movff	tablat,postinc0
    97  007B68  50E5               	movf	postdec1,w,c
    98  007B6A  50E1               	movf	fsr1l,w,c
    99  007B6C  E1FA               	bnz	copy_data0
   100                           
   101                           ; Clear objects allocated to COMRAM (12 bytes)
   102  007B6E  EE00  F03D         	lfsr	0,__pbssCOMRAM
   103  007B72  0E0C               	movlw	12
   104  007B74                     clear_0:
   105  007B74  6AEE               	clrf	postinc0,c
   106  007B76  06E8               	decf	wreg,f,c
   107  007B78  E1FD               	bnz	clear_0
   108  007B7A                     end_of_initialization:
   109                           	opt callstack 0
   110  007B7A                     __end_of__initialization:
   111                           	opt callstack 0
   112  007B7A  0100               	movlb	0
   113  007B7C  EFC7  F03E         	goto	_main	;jump to C main() function
   114                           
   115                           	psect	bssCOMRAM
   116  00003D                     __pbssCOMRAM:
   117                           	opt callstack 0
   118  00003D                     	ds	6
   119  000043                     	ds	6
   120                           
   121                           	psect	dataCOMRAM
   122  000029                     __pdataCOMRAM:
   123                           	opt callstack 0
   124  000029                     _byte7seg:
   125                           	opt callstack 0
   126  000029                     	ds	20
   127                           
   128                           	psect	cstackCOMRAM
   129  000001                     __pcstackCOMRAM:
   130                           	opt callstack 0
   131  000001                     setTimer@minutos_dezena:
   132                           	opt callstack 0
   133  000001                     setScore@centena:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0x0
   137  000001                     	ds	2
   138  000003                     setTimer@minutos_unidade:
   139                           	opt callstack 0
   140  000003                     setScore@dezena:
   141                           	opt callstack 0
   142                           
   143                           ; 2 bytes @ 0x2
   144  000003                     	ds	2
   145  000005                     setTimer@segundos_dezena:
   146                           	opt callstack 0
   147  000005                     setScore@unidade:
   148                           	opt callstack 0
   149                           
   150                           ; 2 bytes @ 0x4
   151  000005                     	ds	2
   152  000007                     ??_setScore:
   153  000007                     setTimer@segundos_unidade:
   154                           	opt callstack 0
   155                           
   156                           ; 2 bytes @ 0x6
   157  000007                     	ds	2
   158  000009                     ??_setTimer:
   159                           
   160                           ; 1 bytes @ 0x8
   161  000009                     	ds	1
   162  00000A                     setScore@i:
   163                           	opt callstack 0
   164                           
   165                           ; 2 bytes @ 0x9
   166  00000A                     	ds	2
   167  00000C                     setTimer@i:
   168                           	opt callstack 0
   169  00000C                     setScore@i_190:
   170                           	opt callstack 0
   171                           
   172                           ; 2 bytes @ 0xB
   173  00000C                     	ds	2
   174  00000E                     setTimer@i_182:
   175                           	opt callstack 0
   176  00000E                     setScore@i_191:
   177                           	opt callstack 0
   178                           
   179                           ; 2 bytes @ 0xD
   180  00000E                     	ds	2
   181  000010                     setTimer@i_183:
   182                           	opt callstack 0
   183                           
   184                           ; 2 bytes @ 0xF
   185  000010                     	ds	2
   186  000012                     setTimer@i_184:
   187                           	opt callstack 0
   188                           
   189                           ; 2 bytes @ 0x11
   190  000012                     	ds	2
   191  000014                     ??_main:
   192                           
   193                           ; 1 bytes @ 0x13
   194  000014                     	ds	1
   195  000015                     main@minutos_dezena:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x14
   199  000015                     	ds	2
   200  000017                     main@minutos_unidade:
   201                           	opt callstack 0
   202                           
   203                           ; 2 bytes @ 0x16
   204  000017                     	ds	2
   205  000019                     main@segundos_dezena:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x18
   209  000019                     	ds	2
   210  00001B                     main@segundos:
   211                           	opt callstack 0
   212                           
   213                           ; 2 bytes @ 0x1A
   214  00001B                     	ds	2
   215  00001D                     main@pontos1:
   216                           	opt callstack 0
   217                           
   218                           ; 6 bytes @ 0x1C
   219  00001D                     	ds	6
   220  000023                     main@pontos2:
   221                           	opt callstack 0
   222                           
   223                           ; 6 bytes @ 0x22
   224  000023                     	ds	6
   225                           
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 39 in file "main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;  segundos        2   26[COMRAM] int 
   236 ;;  pontos2         6   34[COMRAM] int [3]
   237 ;;  pontos1         6   28[COMRAM] int [3]
   238 ;;  segundos_dez    2   24[COMRAM] int 
   239 ;;  minutos_unid    2   22[COMRAM] int 
   240 ;;  minutos_deze    2   20[COMRAM] int 
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      void 
   243 ;; Registers used:
   244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   250 ;;      Params:         0       0       0       0       0       0       0       0       0
   251 ;;      Locals:        20       0       0       0       0       0       0       0       0
   252 ;;      Temps:          1       0       0       0       0       0       0       0       0
   253 ;;      Totals:        21       0       0       0       0       0       0       0       0
   254 ;;Total ram usage:       21 bytes
   255 ;; Hardware stack levels required when called:    2
   256 ;; This function calls:
   257 ;;		_key
   258 ;;		_setScore
   259 ;;		_setTimer
   260 ;;		_setup
   261 ;; This function is called by:
   262 ;;		Startup code after reset
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text0
   267  007D8E                     __ptext0:
   268                           	opt callstack 0
   269  007D8E                     _main:
   270                           	opt callstack 29
   271                           
   272                           ;main.c: 40:     setup();
   273                           
   274                           ;incstack = 0
   275  007D8E  EC86  F03D         	call	_setup	;wreg free
   276                           
   277                           ;main.c: 43:     int minutos_dezena = 0;
   278  007D92  0E00               	movlw	0
   279  007D94  6E16               	movwf	main@minutos_dezena+1,c
   280  007D96  0E00               	movlw	0
   281  007D98  6E15               	movwf	main@minutos_dezena,c
   282                           
   283                           ;main.c: 44:     int minutos_unidade = 0;
   284  007D9A  0E00               	movlw	0
   285  007D9C  6E18               	movwf	main@minutos_unidade+1,c
   286  007D9E  0E00               	movlw	0
   287  007DA0  6E17               	movwf	main@minutos_unidade,c
   288                           
   289                           ;main.c: 45:     int segundos_dezena = 0;
   290  007DA2  0E00               	movlw	0
   291  007DA4  6E1A               	movwf	main@segundos_dezena+1,c
   292  007DA6  0E00               	movlw	0
   293  007DA8  6E19               	movwf	main@segundos_dezena,c
   294                           
   295                           ;main.c: 48:     int pontos1[3] = {0, 0, 0};
   296  007DAA  EE20  F01D         	lfsr	2,main@pontos1
   297  007DAE  0E05               	movlw	5
   298  007DB0                     u441:
   299  007DB0  6ADE               	clrf	postinc2,c
   300  007DB2  06E8               	decf	wreg,f,c
   301  007DB4  E2FD               	bc	u441
   302                           
   303                           ;main.c: 49:     int pontos2[3] = {0, 0, 0};
   304  007DB6  EE20  F023         	lfsr	2,main@pontos2
   305  007DBA  0E05               	movlw	5
   306  007DBC                     u451:
   307  007DBC  6ADE               	clrf	postinc2,c
   308  007DBE  06E8               	decf	wreg,f,c
   309  007DC0  E2FD               	bc	u451
   310  007DC2                     l1082:
   311                           
   312                           ;main.c: 53:         if(PORTDbits.RD3 == 1) {
   313  007DC2  A683               	btfss	3971,3,c	;volatile
   314  007DC4  D010               	goto	l1092
   315                           
   316                           ;main.c: 54:             pontos1[0]++;
   317  007DC6  4A1D               	infsnz	main@pontos1,f,c
   318  007DC8  2A1E               	incf	main@pontos1+1,f,c
   319                           
   320                           ;main.c: 55:             if(pontos1[0] > 9) {
   321  007DCA  BE1E               	btfsc	main@pontos1+1,7,c
   322  007DCC  D00C               	goto	l1092
   323  007DCE  501E               	movf	main@pontos1+1,w,c
   324  007DD0  E104               	bnz	u470
   325  007DD2  0E0A               	movlw	10
   326  007DD4  5C1D               	subwf	main@pontos1,w,c
   327  007DD6  A0D8               	btfss	status,0,c
   328  007DD8  D006               	goto	l1092
   329  007DDA                     u470:
   330                           
   331                           ;main.c: 56:                 pontos1[1]++;
   332  007DDA  4A1F               	infsnz	main@pontos1+2,f,c
   333  007DDC  2A20               	incf	main@pontos1+3,f,c
   334                           
   335                           ;main.c: 57:                 pontos1[0] = 0;
   336  007DDE  0E00               	movlw	0
   337  007DE0  6E1E               	movwf	main@pontos1+1,c
   338  007DE2  0E00               	movlw	0
   339  007DE4  6E1D               	movwf	main@pontos1,c
   340  007DE6                     l1092:
   341                           
   342                           ;main.c: 61:         if(PORTDbits.RD4 == 1) {
   343  007DE6  A883               	btfss	3971,4,c	;volatile
   344  007DE8  D010               	goto	l1102
   345                           
   346                           ;main.c: 62:             pontos2[0]++;
   347  007DEA  4A23               	infsnz	main@pontos2,f,c
   348  007DEC  2A24               	incf	main@pontos2+1,f,c
   349                           
   350                           ;main.c: 63:             if(pontos2[0] > 9) {
   351  007DEE  BE24               	btfsc	main@pontos2+1,7,c
   352  007DF0  D00C               	goto	l1102
   353  007DF2  5024               	movf	main@pontos2+1,w,c
   354  007DF4  E104               	bnz	u490
   355  007DF6  0E0A               	movlw	10
   356  007DF8  5C23               	subwf	main@pontos2,w,c
   357  007DFA  A0D8               	btfss	status,0,c
   358  007DFC  D006               	goto	l1102
   359  007DFE                     u490:
   360                           
   361                           ;main.c: 64:                 pontos2[1]++;
   362  007DFE  4A25               	infsnz	main@pontos2+2,f,c
   363  007E00  2A26               	incf	main@pontos2+3,f,c
   364                           
   365                           ;main.c: 65:                 pontos2[0] = 0;
   366  007E02  0E00               	movlw	0
   367  007E04  6E24               	movwf	main@pontos2+1,c
   368  007E06  0E00               	movlw	0
   369  007E08  6E23               	movwf	main@pontos2,c
   370  007E0A                     l1102:
   371                           
   372                           ;main.c: 72:         for(int segundos = 0; segundos < 10; segundos++) {
   373  007E0A  0E00               	movlw	0
   374  007E0C  6E1C               	movwf	main@segundos+1,c
   375  007E0E  0E00               	movlw	0
   376  007E10  6E1B               	movwf	main@segundos,c
   377  007E12                     l1108:
   378                           
   379                           ;main.c: 73:             setScore(byte7seg[pontos2[2]], byte7seg[pontos2[1]], byte7seg[p
      +                          ontos2[0]]);
   380  007E12  90D8               	bcf	status,0,c
   381  007E14  3427               	rlcf	main@pontos2+4,w,c
   382  007E16  6ED9               	movwf	fsr2l,c
   383  007E18  3428               	rlcf	main@pontos2+5,w,c
   384  007E1A  6EDA               	movwf	fsr2h,c
   385  007E1C  0E29               	movlw	low _byte7seg
   386  007E1E  26D9               	addwf	fsr2l,f,c
   387  007E20  0E00               	movlw	high _byte7seg
   388  007E22  22DA               	addwfc	fsr2h,f,c
   389  007E24  CFDE F001          	movff	postinc2,setScore@centena
   390  007E28  CFDD F002          	movff	postdec2,setScore@centena+1
   391  007E2C  90D8               	bcf	status,0,c
   392  007E2E  3425               	rlcf	main@pontos2+2,w,c
   393  007E30  6ED9               	movwf	fsr2l,c
   394  007E32  3426               	rlcf	main@pontos2+3,w,c
   395  007E34  6EDA               	movwf	fsr2h,c
   396  007E36  0E29               	movlw	low _byte7seg
   397  007E38  26D9               	addwf	fsr2l,f,c
   398  007E3A  0E00               	movlw	high _byte7seg
   399  007E3C  22DA               	addwfc	fsr2h,f,c
   400  007E3E  CFDE F003          	movff	postinc2,setScore@dezena
   401  007E42  CFDD F004          	movff	postdec2,setScore@dezena+1
   402  007E46  90D8               	bcf	status,0,c
   403  007E48  3423               	rlcf	main@pontos2,w,c
   404  007E4A  6ED9               	movwf	fsr2l,c
   405  007E4C  3424               	rlcf	main@pontos2+1,w,c
   406  007E4E  6EDA               	movwf	fsr2h,c
   407  007E50  0E29               	movlw	low _byte7seg
   408  007E52  26D9               	addwf	fsr2l,f,c
   409  007E54  0E00               	movlw	high _byte7seg
   410  007E56  22DA               	addwfc	fsr2h,f,c
   411  007E58  CFDE F005          	movff	postinc2,setScore@unidade
   412  007E5C  CFDD F006          	movff	postdec2,setScore@unidade+1
   413  007E60  ECC0  F03D         	call	_setScore	;wreg free
   414                           
   415                           ;main.c: 74:             setTimer(byte7seg[minutos_dezena], byte7seg[minutos_unidade], b
      +                          yte7seg[segundos_dezena], byte7seg[segundos]);
   416  007E64  90D8               	bcf	status,0,c
   417  007E66  3415               	rlcf	main@minutos_dezena,w,c
   418  007E68  6ED9               	movwf	fsr2l,c
   419  007E6A  3416               	rlcf	main@minutos_dezena+1,w,c
   420  007E6C  6EDA               	movwf	fsr2h,c
   421  007E6E  0E29               	movlw	low _byte7seg
   422  007E70  26D9               	addwf	fsr2l,f,c
   423  007E72  0E00               	movlw	high _byte7seg
   424  007E74  22DA               	addwfc	fsr2h,f,c
   425  007E76  CFDE F001          	movff	postinc2,setTimer@minutos_dezena
   426  007E7A  CFDD F002          	movff	postdec2,setTimer@minutos_dezena+1
   427  007E7E  90D8               	bcf	status,0,c
   428  007E80  3417               	rlcf	main@minutos_unidade,w,c
   429  007E82  6ED9               	movwf	fsr2l,c
   430  007E84  3418               	rlcf	main@minutos_unidade+1,w,c
   431  007E86  6EDA               	movwf	fsr2h,c
   432  007E88  0E29               	movlw	low _byte7seg
   433  007E8A  26D9               	addwf	fsr2l,f,c
   434  007E8C  0E00               	movlw	high _byte7seg
   435  007E8E  22DA               	addwfc	fsr2h,f,c
   436  007E90  CFDE F003          	movff	postinc2,setTimer@minutos_unidade
   437  007E94  CFDD F004          	movff	postdec2,setTimer@minutos_unidade+1
   438  007E98  90D8               	bcf	status,0,c
   439  007E9A  3419               	rlcf	main@segundos_dezena,w,c
   440  007E9C  6ED9               	movwf	fsr2l,c
   441  007E9E  341A               	rlcf	main@segundos_dezena+1,w,c
   442  007EA0  6EDA               	movwf	fsr2h,c
   443  007EA2  0E29               	movlw	low _byte7seg
   444  007EA4  26D9               	addwf	fsr2l,f,c
   445  007EA6  0E00               	movlw	high _byte7seg
   446  007EA8  22DA               	addwfc	fsr2h,f,c
   447  007EAA  CFDE F005          	movff	postinc2,setTimer@segundos_dezena
   448  007EAE  CFDD F006          	movff	postdec2,setTimer@segundos_dezena+1
   449  007EB2  90D8               	bcf	status,0,c
   450  007EB4  341B               	rlcf	main@segundos,w,c
   451  007EB6  6ED9               	movwf	fsr2l,c
   452  007EB8  341C               	rlcf	main@segundos+1,w,c
   453  007EBA  6EDA               	movwf	fsr2h,c
   454  007EBC  0E29               	movlw	low _byte7seg
   455  007EBE  26D9               	addwf	fsr2l,f,c
   456  007EC0  0E00               	movlw	high _byte7seg
   457  007EC2  22DA               	addwfc	fsr2h,f,c
   458  007EC4  CFDE F007          	movff	postinc2,setTimer@segundos_unidade
   459  007EC8  CFDD F008          	movff	postdec2,setTimer@segundos_unidade+1
   460  007ECC  EC31  F03E         	call	_setTimer	;wreg free
   461                           
   462                           ;main.c: 75:             setScore(byte7seg[pontos2[2]], byte7seg[pontos1[1]], byte7seg[p
      +                          ontos1[0]]);
   463  007ED0  90D8               	bcf	status,0,c
   464  007ED2  3427               	rlcf	main@pontos2+4,w,c
   465  007ED4  6ED9               	movwf	fsr2l,c
   466  007ED6  3428               	rlcf	main@pontos2+5,w,c
   467  007ED8  6EDA               	movwf	fsr2h,c
   468  007EDA  0E29               	movlw	low _byte7seg
   469  007EDC  26D9               	addwf	fsr2l,f,c
   470  007EDE  0E00               	movlw	high _byte7seg
   471  007EE0  22DA               	addwfc	fsr2h,f,c
   472  007EE2  CFDE F001          	movff	postinc2,setScore@centena
   473  007EE6  CFDD F002          	movff	postdec2,setScore@centena+1
   474  007EEA  90D8               	bcf	status,0,c
   475  007EEC  341F               	rlcf	main@pontos1+2,w,c
   476  007EEE  6ED9               	movwf	fsr2l,c
   477  007EF0  3420               	rlcf	main@pontos1+3,w,c
   478  007EF2  6EDA               	movwf	fsr2h,c
   479  007EF4  0E29               	movlw	low _byte7seg
   480  007EF6  26D9               	addwf	fsr2l,f,c
   481  007EF8  0E00               	movlw	high _byte7seg
   482  007EFA  22DA               	addwfc	fsr2h,f,c
   483  007EFC  CFDE F003          	movff	postinc2,setScore@dezena
   484  007F00  CFDD F004          	movff	postdec2,setScore@dezena+1
   485  007F04  90D8               	bcf	status,0,c
   486  007F06  341D               	rlcf	main@pontos1,w,c
   487  007F08  6ED9               	movwf	fsr2l,c
   488  007F0A  341E               	rlcf	main@pontos1+1,w,c
   489  007F0C  6EDA               	movwf	fsr2h,c
   490  007F0E  0E29               	movlw	low _byte7seg
   491  007F10  26D9               	addwf	fsr2l,f,c
   492  007F12  0E00               	movlw	high _byte7seg
   493  007F14  22DA               	addwfc	fsr2h,f,c
   494  007F16  CFDE F005          	movff	postinc2,setScore@unidade
   495  007F1A  CFDD F006          	movff	postdec2,setScore@unidade+1
   496  007F1E  ECC0  F03D         	call	_setScore	;wreg free
   497                           
   498                           ;main.c: 76:             key();
   499  007F22  EC8B  F03D         	call	_key	;wreg free
   500                           
   501                           ;main.c: 77:             pontos1[0]++;
   502  007F26  4A1D               	infsnz	main@pontos1,f,c
   503  007F28  2A1E               	incf	main@pontos1+1,f,c
   504                           
   505                           ;main.c: 78:             pontos2[0]++;
   506  007F2A  4A23               	infsnz	main@pontos2,f,c
   507  007F2C  2A24               	incf	main@pontos2+1,f,c
   508                           
   509                           ;main.c: 79:             _delay((unsigned long)((10)*(8000000/4000.0)));
   510  007F2E  0E1A               	movlw	26
   511  007F30  6E14               	movwf	??_main& (0+255),c
   512  007F32  0EF8               	movlw	248
   513  007F34                     u577:
   514  007F34  2EE8               	decfsz	wreg,f,c
   515  007F36  D7FE               	bra	u577
   516  007F38  2E14               	decfsz	??_main& (0+255),f,c
   517  007F3A  D7FC               	bra	u577
   518  007F3C  D000               	nop2	
   519                           
   520                           ;main.c: 80:         }
   521  007F3E  4A1B               	infsnz	main@segundos,f,c
   522  007F40  2A1C               	incf	main@segundos+1,f,c
   523  007F42  BE1C               	btfsc	main@segundos+1,7,c
   524  007F44  D766               	goto	l1108
   525  007F46  501C               	movf	main@segundos+1,w,c
   526  007F48  E104               	bnz	u500
   527  007F4A  0E0A               	movlw	10
   528  007F4C  5C1B               	subwf	main@segundos,w,c
   529  007F4E  A0D8               	btfss	status,0,c
   530  007F50  D760               	goto	l1108
   531  007F52                     u500:
   532                           
   533                           ;main.c: 87:         if(pontos2[0] > 9) {
   534  007F52  BE24               	btfsc	main@pontos2+1,7,c
   535  007F54  D01A               	goto	l1134
   536  007F56  5024               	movf	main@pontos2+1,w,c
   537  007F58  E104               	bnz	u510
   538  007F5A  0E0A               	movlw	10
   539  007F5C  5C23               	subwf	main@pontos2,w,c
   540  007F5E  A0D8               	btfss	status,0,c
   541  007F60  D014               	goto	l1134
   542  007F62                     u510:
   543                           
   544                           ;main.c: 88:             pontos2[1]++;
   545  007F62  4A25               	infsnz	main@pontos2+2,f,c
   546  007F64  2A26               	incf	main@pontos2+3,f,c
   547                           
   548                           ;main.c: 89:             pontos2[0] = 0;
   549  007F66  0E00               	movlw	0
   550  007F68  6E24               	movwf	main@pontos2+1,c
   551  007F6A  0E00               	movlw	0
   552  007F6C  6E23               	movwf	main@pontos2,c
   553                           
   554                           ;main.c: 90:             if(pontos2[1] > 9) {
   555  007F6E  BE26               	btfsc	main@pontos2+3,7,c
   556  007F70  D00C               	goto	l1134
   557  007F72  5026               	movf	main@pontos2+3,w,c
   558  007F74  E104               	bnz	u520
   559  007F76  0E0A               	movlw	10
   560  007F78  5C25               	subwf	main@pontos2+2,w,c
   561  007F7A  A0D8               	btfss	status,0,c
   562  007F7C  D006               	goto	l1134
   563  007F7E                     u520:
   564                           
   565                           ;main.c: 91:                 pontos2[1] = 0;
   566  007F7E  0E00               	movlw	0
   567  007F80  6E26               	movwf	main@pontos2+3,c
   568  007F82  0E00               	movlw	0
   569  007F84  6E25               	movwf	main@pontos2+2,c
   570                           
   571                           ;main.c: 92:                 pontos2[2]++;
   572  007F86  4A27               	infsnz	main@pontos2+4,f,c
   573  007F88  2A28               	incf	main@pontos2+5,f,c
   574  007F8A                     l1134:
   575                           
   576                           ;main.c: 95:         if(pontos1[0] > 9) {
   577  007F8A  BE1E               	btfsc	main@pontos1+1,7,c
   578  007F8C  D01A               	goto	l1146
   579  007F8E  501E               	movf	main@pontos1+1,w,c
   580  007F90  E104               	bnz	u530
   581  007F92  0E0A               	movlw	10
   582  007F94  5C1D               	subwf	main@pontos1,w,c
   583  007F96  A0D8               	btfss	status,0,c
   584  007F98  D014               	goto	l1146
   585  007F9A                     u530:
   586                           
   587                           ;main.c: 96:             pontos1[1]++;
   588  007F9A  4A1F               	infsnz	main@pontos1+2,f,c
   589  007F9C  2A20               	incf	main@pontos1+3,f,c
   590                           
   591                           ;main.c: 97:             pontos1[0] = 0;
   592  007F9E  0E00               	movlw	0
   593  007FA0  6E1E               	movwf	main@pontos1+1,c
   594  007FA2  0E00               	movlw	0
   595  007FA4  6E1D               	movwf	main@pontos1,c
   596                           
   597                           ;main.c: 98:             if(pontos1[1] > 9) {
   598  007FA6  BE20               	btfsc	main@pontos1+3,7,c
   599  007FA8  D00C               	goto	l1146
   600  007FAA  5020               	movf	main@pontos1+3,w,c
   601  007FAC  E104               	bnz	u540
   602  007FAE  0E0A               	movlw	10
   603  007FB0  5C1F               	subwf	main@pontos1+2,w,c
   604  007FB2  A0D8               	btfss	status,0,c
   605  007FB4  D006               	goto	l1146
   606  007FB6                     u540:
   607                           
   608                           ;main.c: 99:                 pontos1[1] = 0;
   609  007FB6  0E00               	movlw	0
   610  007FB8  6E20               	movwf	main@pontos1+3,c
   611  007FBA  0E00               	movlw	0
   612  007FBC  6E1F               	movwf	main@pontos1+2,c
   613                           
   614                           ;main.c: 100:                 pontos1[2]++;
   615  007FBE  4A21               	infsnz	main@pontos1+4,f,c
   616  007FC0  2A22               	incf	main@pontos1+5,f,c
   617  007FC2                     l1146:
   618                           
   619                           ;main.c: 105:         segundos_dezena++;
   620  007FC2  4A19               	infsnz	main@segundos_dezena,f,c
   621  007FC4  2A1A               	incf	main@segundos_dezena+1,f,c
   622                           
   623                           ;main.c: 106:         if(segundos_dezena > 5) {
   624  007FC6  BE1A               	btfsc	main@segundos_dezena+1,7,c
   625  007FC8  D6FC               	goto	l1082
   626  007FCA  501A               	movf	main@segundos_dezena+1,w,c
   627  007FCC  E104               	bnz	u550
   628  007FCE  0E06               	movlw	6
   629  007FD0  5C19               	subwf	main@segundos_dezena,w,c
   630  007FD2  A0D8               	btfss	status,0,c
   631  007FD4  D6F6               	goto	l1082
   632  007FD6                     u550:
   633                           
   634                           ;main.c: 107:             segundos_dezena = 0;
   635  007FD6  0E00               	movlw	0
   636  007FD8  6E1A               	movwf	main@segundos_dezena+1,c
   637  007FDA  0E00               	movlw	0
   638  007FDC  6E19               	movwf	main@segundos_dezena,c
   639                           
   640                           ;main.c: 108:             minutos_unidade++;
   641  007FDE  4A17               	infsnz	main@minutos_unidade,f,c
   642  007FE0  2A18               	incf	main@minutos_unidade+1,f,c
   643                           
   644                           ;main.c: 109:             if(minutos_unidade > 9) {
   645  007FE2  BE18               	btfsc	main@minutos_unidade+1,7,c
   646  007FE4  D6EE               	goto	l1082
   647  007FE6  5018               	movf	main@minutos_unidade+1,w,c
   648  007FE8  E104               	bnz	u560
   649  007FEA  0E0A               	movlw	10
   650  007FEC  5C17               	subwf	main@minutos_unidade,w,c
   651  007FEE  A0D8               	btfss	status,0,c
   652  007FF0  D6E8               	goto	l1082
   653  007FF2                     u560:
   654                           
   655                           ;main.c: 110:                 minutos_unidade = 0;
   656  007FF2  0E00               	movlw	0
   657  007FF4  6E18               	movwf	main@minutos_unidade+1,c
   658  007FF6  0E00               	movlw	0
   659  007FF8  6E17               	movwf	main@minutos_unidade,c
   660                           
   661                           ;main.c: 111:                 minutos_dezena++;
   662  007FFA  4A15               	infsnz	main@minutos_dezena,f,c
   663  007FFC  2A16               	incf	main@minutos_dezena+1,f,c
   664  007FFE  D6E1               	goto	l1082
   665  008000                     __end_of_main:
   666                           	opt callstack 0
   667                           
   668 ;; *************** function _setup *****************
   669 ;; Defined at:
   670 ;;		line 171 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, status,2
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   684 ;;      Params:         0       0       0       0       0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0       0       0       0       0
   686 ;;      Temps:          0       0       0       0       0       0       0       0       0
   687 ;;      Totals:         0       0       0       0       0       0       0       0       0
   688 ;;Total ram usage:        0 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text1
   698  007B0C                     __ptext1:
   699                           	opt callstack 0
   700  007B0C                     _setup:
   701                           	opt callstack 30
   702                           
   703                           ;main.c: 172:     ADCON1 = 0x0F;
   704                           
   705                           ;incstack = 0
   706  007B0C  0E0F               	movlw	15
   707  007B0E  6EC1               	movwf	4033,c	;volatile
   708                           
   709                           ;main.c: 173:     TRISD = 0b00011000;
   710  007B10  0E18               	movlw	24
   711  007B12  6E95               	movwf	3989,c	;volatile
   712  007B14  0012               	return		;funcret
   713  007B16                     __end_of_setup:
   714                           	opt callstack 0
   715                           
   716 ;; *************** function _setTimer *****************
   717 ;; Defined at:
   718 ;;		line 118 in file "main.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;  minutos_deze    2    0[COMRAM] int 
   721 ;;  minutos_unid    2    2[COMRAM] int 
   722 ;;  segundos_dez    2    4[COMRAM] int 
   723 ;;  segundos_uni    2    6[COMRAM] int 
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  i               2   17[COMRAM] int 
   726 ;;  i               2   15[COMRAM] int 
   727 ;;  i               2   13[COMRAM] int 
   728 ;;  i               2   11[COMRAM] int 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2, status,0, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         8       0       0       0       0       0       0       0       0
   739 ;;      Locals:         8       0       0       0       0       0       0       0       0
   740 ;;      Temps:          3       0       0       0       0       0       0       0       0
   741 ;;      Totals:        19       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:       19 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    1
   745 ;; This function calls:
   746 ;;		_clock
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text2
   753  007C62                     __ptext2:
   754                           	opt callstack 0
   755  007C62                     _setTimer:
   756                           	opt callstack 29
   757                           
   758                           ;main.c: 119:     for(int i = 0; i < 8; i++) {
   759                           
   760                           ;incstack = 0
   761  007C62  0E00               	movlw	0
   762  007C64  6E0D               	movwf	setTimer@i+1,c
   763  007C66  0E00               	movlw	0
   764  007C68  6E0C               	movwf	setTimer@i,c
   765  007C6A                     l1020:
   766                           
   767                           ;main.c: 120:         LATDbits.LATD1 = (minutos_dezena >> i) & 0x01;
   768  007C6A  C00C  F009         	movff	setTimer@i,??_setTimer
   769  007C6E  C001  F00A         	movff	setTimer@minutos_dezena,??_setTimer+1
   770  007C72  C002  F00B         	movff	setTimer@minutos_dezena+1,??_setTimer+2
   771  007C76  2A09               	incf	??_setTimer,f,c
   772  007C78  D003               	goto	u364
   773  007C7A                     u365:
   774  007C7A  340B               	rlcf	??_setTimer+2,w,c
   775  007C7C  320B               	rrcf	??_setTimer+2,f,c
   776  007C7E  320A               	rrcf	??_setTimer+1,f,c
   777  007C80                     u364:
   778  007C80  2E09               	decfsz	??_setTimer,f,c
   779  007C82  D7FB               	goto	u365
   780  007C84  0E01               	movlw	1
   781  007C86  160A               	andwf	??_setTimer+1,f,c
   782  007C88  460A               	rlncf	??_setTimer+1,f,c
   783  007C8A  508C               	movf	3980,w,c	;volatile
   784  007C8C  180A               	xorwf	??_setTimer+1,w,c
   785  007C8E  0BFD               	andlw	-3
   786  007C90  180A               	xorwf	??_setTimer+1,w,c
   787  007C92  6E8C               	movwf	3980,c	;volatile
   788                           
   789                           ;main.c: 121:         clock();
   790  007C94  EC9C  F03D         	call	_clock	;wreg free
   791                           
   792                           ;main.c: 122:     }
   793  007C98  4A0C               	infsnz	setTimer@i,f,c
   794  007C9A  2A0D               	incf	setTimer@i+1,f,c
   795  007C9C  BE0D               	btfsc	setTimer@i+1,7,c
   796  007C9E  D7E5               	goto	l1020
   797  007CA0  500D               	movf	setTimer@i+1,w,c
   798  007CA2  E104               	bnz	u370
   799  007CA4  0E08               	movlw	8
   800  007CA6  5C0C               	subwf	setTimer@i,w,c
   801  007CA8  A0D8               	btfss	status,0,c
   802  007CAA  D7DF               	goto	l1020
   803  007CAC                     u370:
   804                           
   805                           ;main.c: 123:     for(int i = 0; i < 8; i++) {
   806  007CAC  0E00               	movlw	0
   807  007CAE  6E0F               	movwf	setTimer@i_182+1,c
   808  007CB0  0E00               	movlw	0
   809  007CB2  6E0E               	movwf	setTimer@i_182,c
   810  007CB4                     l1034:
   811                           
   812                           ;main.c: 124:         LATDbits.LATD1 = (minutos_unidade >> i) & 0x01;
   813  007CB4  C00E  F009         	movff	setTimer@i_182,??_setTimer
   814  007CB8  C003  F00A         	movff	setTimer@minutos_unidade,??_setTimer+1
   815  007CBC  C004  F00B         	movff	setTimer@minutos_unidade+1,??_setTimer+2
   816  007CC0  2A09               	incf	??_setTimer,f,c
   817  007CC2  D003               	goto	u384
   818  007CC4                     u385:
   819  007CC4  340B               	rlcf	??_setTimer+2,w,c
   820  007CC6  320B               	rrcf	??_setTimer+2,f,c
   821  007CC8  320A               	rrcf	??_setTimer+1,f,c
   822  007CCA                     u384:
   823  007CCA  2E09               	decfsz	??_setTimer,f,c
   824  007CCC  D7FB               	goto	u385
   825  007CCE  0E01               	movlw	1
   826  007CD0  160A               	andwf	??_setTimer+1,f,c
   827  007CD2  460A               	rlncf	??_setTimer+1,f,c
   828  007CD4  508C               	movf	3980,w,c	;volatile
   829  007CD6  180A               	xorwf	??_setTimer+1,w,c
   830  007CD8  0BFD               	andlw	-3
   831  007CDA  180A               	xorwf	??_setTimer+1,w,c
   832  007CDC  6E8C               	movwf	3980,c	;volatile
   833                           
   834                           ;main.c: 125:         clock();
   835  007CDE  EC9C  F03D         	call	_clock	;wreg free
   836                           
   837                           ;main.c: 126:     }for(int i = 0; i < 8; i++) {
   838  007CE2  4A0E               	infsnz	setTimer@i_182,f,c
   839  007CE4  2A0F               	incf	setTimer@i_182+1,f,c
   840  007CE6  BE0F               	btfsc	setTimer@i_182+1,7,c
   841  007CE8  D7E5               	goto	l1034
   842  007CEA  500F               	movf	setTimer@i_182+1,w,c
   843  007CEC  E104               	bnz	u390
   844  007CEE  0E08               	movlw	8
   845  007CF0  5C0E               	subwf	setTimer@i_182,w,c
   846  007CF2  A0D8               	btfss	status,0,c
   847  007CF4  D7DF               	goto	l1034
   848  007CF6                     u390:
   849  007CF6  0E00               	movlw	0
   850  007CF8  6E11               	movwf	setTimer@i_183+1,c
   851  007CFA  0E00               	movlw	0
   852  007CFC  6E10               	movwf	setTimer@i_183,c
   853  007CFE                     l1048:
   854                           
   855                           ;main.c: 127:         LATDbits.LATD1 = (segundos_dezena >> i) & 0x01;
   856  007CFE  C010  F009         	movff	setTimer@i_183,??_setTimer
   857  007D02  C005  F00A         	movff	setTimer@segundos_dezena,??_setTimer+1
   858  007D06  C006  F00B         	movff	setTimer@segundos_dezena+1,??_setTimer+2
   859  007D0A  2A09               	incf	??_setTimer,f,c
   860  007D0C  D003               	goto	u404
   861  007D0E                     u405:
   862  007D0E  340B               	rlcf	??_setTimer+2,w,c
   863  007D10  320B               	rrcf	??_setTimer+2,f,c
   864  007D12  320A               	rrcf	??_setTimer+1,f,c
   865  007D14                     u404:
   866  007D14  2E09               	decfsz	??_setTimer,f,c
   867  007D16  D7FB               	goto	u405
   868  007D18  0E01               	movlw	1
   869  007D1A  160A               	andwf	??_setTimer+1,f,c
   870  007D1C  460A               	rlncf	??_setTimer+1,f,c
   871  007D1E  508C               	movf	3980,w,c	;volatile
   872  007D20  180A               	xorwf	??_setTimer+1,w,c
   873  007D22  0BFD               	andlw	-3
   874  007D24  180A               	xorwf	??_setTimer+1,w,c
   875  007D26  6E8C               	movwf	3980,c	;volatile
   876                           
   877                           ;main.c: 128:         clock();
   878  007D28  EC9C  F03D         	call	_clock	;wreg free
   879                           
   880                           ;main.c: 129:     }
   881  007D2C  4A10               	infsnz	setTimer@i_183,f,c
   882  007D2E  2A11               	incf	setTimer@i_183+1,f,c
   883  007D30  BE11               	btfsc	setTimer@i_183+1,7,c
   884  007D32  D7E5               	goto	l1048
   885  007D34  5011               	movf	setTimer@i_183+1,w,c
   886  007D36  E104               	bnz	u410
   887  007D38  0E08               	movlw	8
   888  007D3A  5C10               	subwf	setTimer@i_183,w,c
   889  007D3C  A0D8               	btfss	status,0,c
   890  007D3E  D7DF               	goto	l1048
   891  007D40                     u410:
   892                           
   893                           ;main.c: 130:     for(int i = 0; i < 8; i++) {
   894  007D40  0E00               	movlw	0
   895  007D42  6E13               	movwf	setTimer@i_184+1,c
   896  007D44  0E00               	movlw	0
   897  007D46  6E12               	movwf	setTimer@i_184,c
   898  007D48                     l1062:
   899                           
   900                           ;main.c: 131:         LATDbits.LATD1 = (segundos_unidade >> i) & 0x01;
   901  007D48  C012  F009         	movff	setTimer@i_184,??_setTimer
   902  007D4C  C007  F00A         	movff	setTimer@segundos_unidade,??_setTimer+1
   903  007D50  C008  F00B         	movff	setTimer@segundos_unidade+1,??_setTimer+2
   904  007D54  2A09               	incf	??_setTimer,f,c
   905  007D56  D003               	goto	u424
   906  007D58                     u425:
   907  007D58  340B               	rlcf	??_setTimer+2,w,c
   908  007D5A  320B               	rrcf	??_setTimer+2,f,c
   909  007D5C  320A               	rrcf	??_setTimer+1,f,c
   910  007D5E                     u424:
   911  007D5E  2E09               	decfsz	??_setTimer,f,c
   912  007D60  D7FB               	goto	u425
   913  007D62  0E01               	movlw	1
   914  007D64  160A               	andwf	??_setTimer+1,f,c
   915  007D66  460A               	rlncf	??_setTimer+1,f,c
   916  007D68  508C               	movf	3980,w,c	;volatile
   917  007D6A  180A               	xorwf	??_setTimer+1,w,c
   918  007D6C  0BFD               	andlw	-3
   919  007D6E  180A               	xorwf	??_setTimer+1,w,c
   920  007D70  6E8C               	movwf	3980,c	;volatile
   921                           
   922                           ;main.c: 132:         clock();
   923  007D72  EC9C  F03D         	call	_clock	;wreg free
   924                           
   925                           ;main.c: 133:     }
   926  007D76  4A12               	infsnz	setTimer@i_184,f,c
   927  007D78  2A13               	incf	setTimer@i_184+1,f,c
   928  007D7A  BE13               	btfsc	setTimer@i_184+1,7,c
   929  007D7C  D7E5               	goto	l1062
   930  007D7E  5013               	movf	setTimer@i_184+1,w,c
   931  007D80  E105               	bnz	u430
   932  007D82  0E08               	movlw	8
   933  007D84  5C12               	subwf	setTimer@i_184,w,c
   934  007D86  B0D8               	btfsc	status,0,c
   935  007D88  0012               	return	
   936  007D8A  D7DE               	goto	l1062
   937  007D8C                     u430:
   938  007D8C  0012               	return		;funcret
   939  007D8E                     __end_of_setTimer:
   940                           	opt callstack 0
   941                           
   942 ;; *************** function _setScore *****************
   943 ;; Defined at:
   944 ;;		line 136 in file "main.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  centena         2    0[COMRAM] int 
   947 ;;  dezena          2    2[COMRAM] int 
   948 ;;  unidade         2    4[COMRAM] int 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  i               2   13[COMRAM] int 
   951 ;;  i               2   11[COMRAM] int 
   952 ;;  i               2    9[COMRAM] int 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   962 ;;      Params:         6       0       0       0       0       0       0       0       0
   963 ;;      Locals:         6       0       0       0       0       0       0       0       0
   964 ;;      Temps:          3       0       0       0       0       0       0       0       0
   965 ;;      Totals:        15       0       0       0       0       0       0       0       0
   966 ;;Total ram usage:       15 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; Hardware stack levels required when called:    1
   969 ;; This function calls:
   970 ;;		_clock
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text3
   977  007B80                     __ptext3:
   978                           	opt callstack 0
   979  007B80                     _setScore:
   980                           	opt callstack 29
   981                           
   982                           ;main.c: 137:     for(int i = 0; i < 8; i++) {
   983                           
   984                           ;incstack = 0
   985  007B80  0E00               	movlw	0
   986  007B82  6E0B               	movwf	setScore@i+1,c
   987  007B84  0E00               	movlw	0
   988  007B86  6E0A               	movwf	setScore@i,c
   989  007B88                     l978:
   990                           
   991                           ;main.c: 138:         LATDbits.LATD1 = (centena >> i) & 0x01;
   992  007B88  C00A  F007         	movff	setScore@i,??_setScore
   993  007B8C  C001  F008         	movff	setScore@centena,??_setScore+1
   994  007B90  C002  F009         	movff	setScore@centena+1,??_setScore+2
   995  007B94  2A07               	incf	??_setScore,f,c
   996  007B96  D003               	goto	u304
   997  007B98                     u305:
   998  007B98  3409               	rlcf	??_setScore+2,w,c
   999  007B9A  3209               	rrcf	??_setScore+2,f,c
  1000  007B9C  3208               	rrcf	??_setScore+1,f,c
  1001  007B9E                     u304:
  1002  007B9E  2E07               	decfsz	??_setScore,f,c
  1003  007BA0  D7FB               	goto	u305
  1004  007BA2  0E01               	movlw	1
  1005  007BA4  1608               	andwf	??_setScore+1,f,c
  1006  007BA6  4608               	rlncf	??_setScore+1,f,c
  1007  007BA8  508C               	movf	3980,w,c	;volatile
  1008  007BAA  1808               	xorwf	??_setScore+1,w,c
  1009  007BAC  0BFD               	andlw	-3
  1010  007BAE  1808               	xorwf	??_setScore+1,w,c
  1011  007BB0  6E8C               	movwf	3980,c	;volatile
  1012                           
  1013                           ;main.c: 139:         clock();
  1014  007BB2  EC9C  F03D         	call	_clock	;wreg free
  1015                           
  1016                           ;main.c: 140:     }
  1017  007BB6  4A0A               	infsnz	setScore@i,f,c
  1018  007BB8  2A0B               	incf	setScore@i+1,f,c
  1019  007BBA  BE0B               	btfsc	setScore@i+1,7,c
  1020  007BBC  D7E5               	goto	l978
  1021  007BBE  500B               	movf	setScore@i+1,w,c
  1022  007BC0  E104               	bnz	u310
  1023  007BC2  0E08               	movlw	8
  1024  007BC4  5C0A               	subwf	setScore@i,w,c
  1025  007BC6  A0D8               	btfss	status,0,c
  1026  007BC8  D7DF               	goto	l978
  1027  007BCA                     u310:
  1028                           
  1029                           ;main.c: 141:     for(int i = 0; i < 8; i++) {
  1030  007BCA  0E00               	movlw	0
  1031  007BCC  6E0D               	movwf	setScore@i_190+1,c
  1032  007BCE  0E00               	movlw	0
  1033  007BD0  6E0C               	movwf	setScore@i_190,c
  1034  007BD2                     l992:
  1035                           
  1036                           ;main.c: 142:         LATDbits.LATD1 = (dezena >> i) & 0x01;
  1037  007BD2  C00C  F007         	movff	setScore@i_190,??_setScore
  1038  007BD6  C003  F008         	movff	setScore@dezena,??_setScore+1
  1039  007BDA  C004  F009         	movff	setScore@dezena+1,??_setScore+2
  1040  007BDE  2A07               	incf	??_setScore,f,c
  1041  007BE0  D003               	goto	u324
  1042  007BE2                     u325:
  1043  007BE2  3409               	rlcf	??_setScore+2,w,c
  1044  007BE4  3209               	rrcf	??_setScore+2,f,c
  1045  007BE6  3208               	rrcf	??_setScore+1,f,c
  1046  007BE8                     u324:
  1047  007BE8  2E07               	decfsz	??_setScore,f,c
  1048  007BEA  D7FB               	goto	u325
  1049  007BEC  0E01               	movlw	1
  1050  007BEE  1608               	andwf	??_setScore+1,f,c
  1051  007BF0  4608               	rlncf	??_setScore+1,f,c
  1052  007BF2  508C               	movf	3980,w,c	;volatile
  1053  007BF4  1808               	xorwf	??_setScore+1,w,c
  1054  007BF6  0BFD               	andlw	-3
  1055  007BF8  1808               	xorwf	??_setScore+1,w,c
  1056  007BFA  6E8C               	movwf	3980,c	;volatile
  1057                           
  1058                           ;main.c: 143:         clock();
  1059  007BFC  EC9C  F03D         	call	_clock	;wreg free
  1060                           
  1061                           ;main.c: 144:     }
  1062  007C00  4A0C               	infsnz	setScore@i_190,f,c
  1063  007C02  2A0D               	incf	setScore@i_190+1,f,c
  1064  007C04  BE0D               	btfsc	setScore@i_190+1,7,c
  1065  007C06  D7E5               	goto	l992
  1066  007C08  500D               	movf	setScore@i_190+1,w,c
  1067  007C0A  E104               	bnz	u330
  1068  007C0C  0E08               	movlw	8
  1069  007C0E  5C0C               	subwf	setScore@i_190,w,c
  1070  007C10  A0D8               	btfss	status,0,c
  1071  007C12  D7DF               	goto	l992
  1072  007C14                     u330:
  1073                           
  1074                           ;main.c: 145:     for(int i = 0; i < 8; i++) {
  1075  007C14  0E00               	movlw	0
  1076  007C16  6E0F               	movwf	setScore@i_191+1,c
  1077  007C18  0E00               	movlw	0
  1078  007C1A  6E0E               	movwf	setScore@i_191,c
  1079  007C1C                     l1006:
  1080                           
  1081                           ;main.c: 146:         LATDbits.LATD1 = (unidade >> i) & 0x01;
  1082  007C1C  C00E  F007         	movff	setScore@i_191,??_setScore
  1083  007C20  C005  F008         	movff	setScore@unidade,??_setScore+1
  1084  007C24  C006  F009         	movff	setScore@unidade+1,??_setScore+2
  1085  007C28  2A07               	incf	??_setScore,f,c
  1086  007C2A  D003               	goto	u344
  1087  007C2C                     u345:
  1088  007C2C  3409               	rlcf	??_setScore+2,w,c
  1089  007C2E  3209               	rrcf	??_setScore+2,f,c
  1090  007C30  3208               	rrcf	??_setScore+1,f,c
  1091  007C32                     u344:
  1092  007C32  2E07               	decfsz	??_setScore,f,c
  1093  007C34  D7FB               	goto	u345
  1094  007C36  0E01               	movlw	1
  1095  007C38  1608               	andwf	??_setScore+1,f,c
  1096  007C3A  4608               	rlncf	??_setScore+1,f,c
  1097  007C3C  508C               	movf	3980,w,c	;volatile
  1098  007C3E  1808               	xorwf	??_setScore+1,w,c
  1099  007C40  0BFD               	andlw	-3
  1100  007C42  1808               	xorwf	??_setScore+1,w,c
  1101  007C44  6E8C               	movwf	3980,c	;volatile
  1102                           
  1103                           ;main.c: 147:         clock();
  1104  007C46  EC9C  F03D         	call	_clock	;wreg free
  1105                           
  1106                           ;main.c: 148:     }
  1107  007C4A  4A0E               	infsnz	setScore@i_191,f,c
  1108  007C4C  2A0F               	incf	setScore@i_191+1,f,c
  1109  007C4E  BE0F               	btfsc	setScore@i_191+1,7,c
  1110  007C50  D7E5               	goto	l1006
  1111  007C52  500F               	movf	setScore@i_191+1,w,c
  1112  007C54  E105               	bnz	u350
  1113  007C56  0E08               	movlw	8
  1114  007C58  5C0E               	subwf	setScore@i_191,w,c
  1115  007C5A  B0D8               	btfsc	status,0,c
  1116  007C5C  0012               	return	
  1117  007C5E  D7DE               	goto	l1006
  1118  007C60                     u350:
  1119  007C60  0012               	return		;funcret
  1120  007C62                     __end_of_setScore:
  1121                           	opt callstack 0
  1122                           
  1123 ;; *************** function _clock *****************
  1124 ;; Defined at:
  1125 ;;		line 158 in file "main.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; This function calls:
  1146 ;;		Nothing
  1147 ;; This function is called by:
  1148 ;;		_setTimer
  1149 ;;		_setScore
  1150 ;;		_sendData
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154                           	psect	text4
  1155  007B38                     __ptext4:
  1156                           	opt callstack 0
  1157  007B38                     _clock:
  1158                           	opt callstack 29
  1159                           
  1160                           ;main.c: 159:     LATDbits.LATD0 = 1;
  1161                           
  1162                           ;incstack = 0
  1163  007B38  808C               	bsf	3980,0,c	;volatile
  1164                           
  1165                           ;main.c: 160:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1166  007B3A  0EC8               	movlw	200
  1167  007B3C                     u587:
  1168  007B3C  D000               	nop2	
  1169  007B3E  2EE8               	decfsz	wreg,f,c
  1170  007B40  D7FD               	bra	u587
  1171                           
  1172                           ;main.c: 161:     LATDbits.LATD0 = 0;
  1173  007B42  908C               	bcf	3980,0,c	;volatile
  1174                           
  1175                           ;main.c: 162:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1176  007B44  0EC8               	movlw	200
  1177  007B46                     u597:
  1178  007B46  D000               	nop2	
  1179  007B48  2EE8               	decfsz	wreg,f,c
  1180  007B4A  D7FD               	bra	u597
  1181  007B4C  0012               	return		;funcret
  1182  007B4E                     __end_of_clock:
  1183                           	opt callstack 0
  1184                           
  1185 ;; *************** function _key *****************
  1186 ;; Defined at:
  1187 ;;		line 165 in file "main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1205 ;;Total ram usage:        0 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_main
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text5
  1215  007B16                     __ptext5:
  1216                           	opt callstack 0
  1217  007B16                     _key:
  1218                           	opt callstack 30
  1219                           
  1220                           ;main.c: 166:     LATDbits.LATD2 = 1;
  1221                           
  1222                           ;incstack = 0
  1223  007B16  848C               	bsf	3980,2,c	;volatile
  1224                           
  1225                           ;main.c: 167:     _delay((unsigned long)((500)*(8000000/4000000.0)));
  1226  007B18  0EC8               	movlw	200
  1227  007B1A                     u607:
  1228  007B1A  D000               	nop2	
  1229  007B1C  2EE8               	decfsz	wreg,f,c
  1230  007B1E  D7FD               	bra	u607
  1231                           
  1232                           ;main.c: 168:     LATDbits.LATD2 = 0;
  1233  007B20  948C               	bcf	3980,2,c	;volatile
  1234  007B22  0012               	return		;funcret
  1235  007B24                     __end_of_key:
  1236                           	opt callstack 0
  1237  0000                     
  1238                           	psect	rparam
  1239  0000                     tosu	equ	0xFFF
  1240                           tosh	equ	0xFFE
  1241                           tosl	equ	0xFFD
  1242                           stkptr	equ	0xFFC
  1243                           pclatu	equ	0xFFB
  1244                           pclath	equ	0xFFA
  1245                           pcl	equ	0xFF9
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           prodh	equ	0xFF4
  1251                           prodl	equ	0xFF3
  1252                           indf0	equ	0xFEF
  1253                           postinc0	equ	0xFEE
  1254                           postdec0	equ	0xFED
  1255                           preinc0	equ	0xFEC
  1256                           plusw0	equ	0xFEB
  1257                           fsr0h	equ	0xFEA
  1258                           fsr0l	equ	0xFE9
  1259                           wreg	equ	0xFE8
  1260                           indf1	equ	0xFE7
  1261                           postinc1	equ	0xFE6
  1262                           postdec1	equ	0xFE5
  1263                           preinc1	equ	0xFE4
  1264                           plusw1	equ	0xFE3
  1265                           fsr1h	equ	0xFE2
  1266                           fsr1l	equ	0xFE1
  1267                           bsr	equ	0xFE0
  1268                           indf2	equ	0xFDF
  1269                           postinc2	equ	0xFDE
  1270                           postdec2	equ	0xFDD
  1271                           preinc2	equ	0xFDC
  1272                           plusw2	equ	0xFDB
  1273                           fsr2h	equ	0xFDA
  1274                           fsr2l	equ	0xFD9
  1275                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      72
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_setTimer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    2048
                                             19 COMRAM    21    21      0
                                _key
                           _setScore
                           _setTimer
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setTimer                                            19    11      8     664
                                              0 COMRAM    19    11      8
                              _clock
 ---------------------------------------------------------------------------------
 (1) _setScore                                            15     9      6     726
                                              0 COMRAM    15     9      6
                              _clock
 ---------------------------------------------------------------------------------
 (2) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _key                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _key
   _setScore
     _clock
   _setTimer
     _clock
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      48       1       75.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      20        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May 27 21:48:13 2019

             __CFG_BOR$ON 000000               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
             __CFG_LVP$ON 000000               __CFG_WDT$ON 000000                       l992 7BD2  
                     l978 7B88              __CFG_CPB$OFF 000000                       u310 7BCA  
                     u304 7B9E                       u305 7B98                       u330 7C14  
                     u410 7D40                       u324 7BE8                       u404 7D14  
                     u500 7F52                       u325 7BE2                       u405 7D0E  
                     u350 7C60                       u430 7D8C                       u510 7F62  
                     u344 7C32                       u424 7D5E                       u520 7F7E  
                     u345 7C2C                       u425 7D58                       u441 7DB0  
                     u370 7CAC                       u530 7F9A              __CFG_CPD$OFF 000000  
                     u451 7DBC                       u364 7C80                       u540 7FB6  
                     u365 7C7A                       u390 7CF6                       u550 7FD6  
                     u470 7DDA                       u607 7B1A                       u384 7CCA  
                     u560 7FF2                       u385 7CC4                       u490 7DFE  
                     u577 7F34                       u587 7B3C                       u597 7B46  
                     _key 7B16                       wreg 000FE8                      l1020 7C6A  
                    l1006 7C1C                      l1102 7E0A                      l1034 7CB4  
                    l1108 7E12                      l1062 7D48                      l1134 7F8A  
                    l1048 7CFE                      l1146 7FC2                      l1082 7DC2  
                    l1092 7DE6                      ?_key 0001                      _main 7D8E  
                    fsr2h 000FDA                      fsr1l 000FE1                      fsr2l 000FD9  
             main@pontos1 001D               main@pontos2 0023                      start 0000  
           __CFG_IESO$OFF 000000             __CFG_MCLRE$ON 000000              ___param_bank 000000  
                   ??_key 0001             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001             __CFG_USBDIV$1 000000                     _TRISD 000F95  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000  
          __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000                     _clock 7B38  
            main@segundos 001B                     _setup 7B0C                     tablat 000FF5  
                   status 000FD8            __CFG_ICPRT$OFF 000000            __CFG_PBADEN$ON 000000  
         __initialization 7B4E              __end_of_main 8000                    ??_main 0014  
           __activetblptr 000000                    ?_clock 0001                    _ADCON1 000FC1  
                  ?_setup 0001            __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000  
                  clear_0 7B74          __end_of_setScore 7C62          __end_of_setTimer 7D8E  
            __pdataCOMRAM 0029                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8           __CFG_FOSC$EC_EC 000000                __accesstop 0060  
 __end_of__initialization 7B7A             ___rparam_used 000001            __pcstackCOMRAM 0001  
 setTimer@segundos_dezena 0005             __end_of_clock 7B4E             __end_of_setup 7B16  
                 ??_clock 0001                   ??_setup 0001       main@minutos_unidade 0017  
         __CFG_VREGEN$OFF 000000                   __Hparam 0000                 ?_setScore 0001  
               ?_setTimer 0001                   __Lparam 0000                   __pcinit 7B4E  
                 __ramtop 0800                   __ptext0 7D8E                   __ptext1 7B0C  
                 __ptext2 7C62                   __ptext3 7B80                   __ptext4 7B38  
                 __ptext5 7B16              __size_of_key 000E      end_of_initialization 7B7A  
              ??_setScore 0007                ??_setTimer 0009                   postdec1 000FE5  
                 postdec2 000FDD                   postinc0 000FEE                   postinc2 000FDE  
           setScore@i_190 000C             setScore@i_191 000E                 _PORTDbits 000F83  
           setTimer@i_182 000E             setTimer@i_183 0010             setTimer@i_184 0012  
           __pidataCOMRAM 7B24       start_initialization 7B4E  setTimer@segundos_unidade 0007  
             __end_of_key 7B24          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 003D  
      main@minutos_dezena 0015         __size_of_setScore 00E2         __size_of_setTimer 012C  
          __size_of_clock 0016            __size_of_setup 000A                  _LATDbits 000F8C  
        __CFG_WDTPS$32768 000000                 main@F3181 003D                 main@F3179 0043  
     main@segundos_dezena 0019                 copy_data0 7B62                  __Hrparam 0000  
                __Lrparam 0000                 setScore@i 000A                 setTimer@i 000C  
                _byte7seg 0029             __size_of_main 0272   setTimer@minutos_unidade 0003  
                _setScore 7B80                  _setTimer 7C62     __CFG_CPUDIV$OSC1_PLL2 000000  
  setTimer@minutos_dezena 0001           setScore@centena 0001           setScore@unidade 0005  
          setScore@dezena 0003  
